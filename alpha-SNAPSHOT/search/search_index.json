{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Kotlinx Protobuf Generator \u00b6 Generate kotlin data classes from .proto files that supports Kotlin Native that can be serialized and deserialized to protobuf using kotlinx.serialization . syntax = \"proto3\" ; package demo ; message Task { int32 id = 1 ; optional string description = 2 ; Status status = 3 ; enum Status { WIP = 0 ; DONE = 1 ; } } The code above will generate the following data class, @Serializable public data class Task ( @ProtoNumber ( number = 1 ) public val id : Int = 0 , @ProtoNumber ( number = 2 ) public val description : String? = null , @ProtoNumber ( number = 3 ) public val status : Status = testgen . demo . Task . Status . WIP , ) { @Serializable public enum class Status { @ProtoNumber ( number = 0 ) WIP , @ProtoNumber ( number = 1 ) DONE , } }","title":"Home"},{"location":"#kotlinx-protobuf-generator","text":"Generate kotlin data classes from .proto files that supports Kotlin Native that can be serialized and deserialized to protobuf using kotlinx.serialization . syntax = \"proto3\" ; package demo ; message Task { int32 id = 1 ; optional string description = 2 ; Status status = 3 ; enum Status { WIP = 0 ; DONE = 1 ; } } The code above will generate the following data class, @Serializable public data class Task ( @ProtoNumber ( number = 1 ) public val id : Int = 0 , @ProtoNumber ( number = 2 ) public val description : String? = null , @ProtoNumber ( number = 3 ) public val status : Status = testgen . demo . Task . Status . WIP , ) { @Serializable public enum class Status { @ProtoNumber ( number = 0 ) WIP , @ProtoNumber ( number = 1 ) DONE , } }","title":"Kotlinx Protobuf Generator"},{"location":"about/contributing/","text":"Contributing \u00b6 TODO Opening issues and PRs Setting up local environment Project structure Building & testing","title":"Contributing"},{"location":"about/contributing/#contributing","text":"TODO Opening issues and PRs Setting up local environment Project structure Building & testing","title":"Contributing"},{"location":"about/history/","text":"1.0.0 (2017.11.01) \u00b6 Initial release","title":"Release notes"},{"location":"about/history/#100-20171101","text":"Initial release","title":"1.0.0 (2017.11.01)"},{"location":"guide/customizing/","text":"Customizing \u00b6 To customize the code generated, you can pass command line arguments or gradle options. For example, protobuf { protoc { artifact = \"com.google.protobuf:protoc: $ protobufVersion \" } plugins { id ( \"kotlinx-protobuf-gen\" ) { artifact = \"io.github.dogacel:kotlinx-protobuf-gen:alpha-SNAPSHOT:jvm8@jar\" } } // Enable Kotlin generation generateProtoTasks { all (). forEach { it . builtins { remove ( \"java\" ) // Optionally you can keep the java generated files. } it . plugins { id ( \"kotlinx-protobuf-gen\" ) { option ( \"package_prefix=custom.pkg\" ) // Set a custom package prefix } } } } } Available Options \u00b6 Option Description Default package_prefix Prefix for the generated package names. Appended to the start of each class \"\" useCamelCase Whether to use the original snake_case for proto fields or camelCase . Can be either true or false . true generateServices Whether to generate abstract gRPC stubs or not. Can be either true or false . true","title":"Customizing"},{"location":"guide/customizing/#customizing","text":"To customize the code generated, you can pass command line arguments or gradle options. For example, protobuf { protoc { artifact = \"com.google.protobuf:protoc: $ protobufVersion \" } plugins { id ( \"kotlinx-protobuf-gen\" ) { artifact = \"io.github.dogacel:kotlinx-protobuf-gen:alpha-SNAPSHOT:jvm8@jar\" } } // Enable Kotlin generation generateProtoTasks { all (). forEach { it . builtins { remove ( \"java\" ) // Optionally you can keep the java generated files. } it . plugins { id ( \"kotlinx-protobuf-gen\" ) { option ( \"package_prefix=custom.pkg\" ) // Set a custom package prefix } } } } }","title":"Customizing"},{"location":"guide/customizing/#available-options","text":"Option Description Default package_prefix Prefix for the generated package names. Appended to the start of each class \"\" useCamelCase Whether to use the original snake_case for proto fields or camelCase . Can be either true or false . true generateServices Whether to generate abstract gRPC stubs or not. Can be either true or false . true","title":"Available Options"},{"location":"guide/setup/","text":"Setup \u00b6 To see more examples on how to use this library, check out the examples directory. This document also includes details regarding the protoc gradle plugin setup to include .proto files in your project. You can either directly compile proto sources in your kotlin project or you can prefer to publish a JAR containing the sources and include it in your project. Currently only available version is alpha-SNAPSHOT . In order to use it, you need to add sonatype snapshot repository to your build.gradle.kts file, repositories { mavenCentral () maven { this . url = uri ( \"https://s01.oss.sonatype.org/content/repositories/snapshots/\" ) } } 1. Dependencies, \u00b6 plugins { kotlin ( \"jvm\" ) version \"1.9.0\" id ( \"org.jetbrains.kotlin.plugin.serialization\" ) version \"1.9.0\" id ( \"com.google.protobuf\" ) version \"0.9.4\" } var protobufVersion = \"3.23.4\" dependencies { implementation ( \"org.jetbrains.kotlinx:kotlinx-serialization-json:1.6.0-RC\" ) implementation ( \"org.jetbrains.kotlinx:kotlinx-serialization-protobuf:1.6.0-RC\" ) // Required if stream service definitions will be generated. Streaming RPC operations are // defined as Flow<...> types in code. implementation ( \"org.jetbrains.kotlinx:kotlinx-coroutines-core:1.7.3\" ) // Required if `bytes` type is used. implementation ( \"com.google.protobuf:protobuf-kotlin: $ protobufVersion \" ) // Required for importing well-known types such as `com.google.protobuf.Timestamp`. implementation ( \"com.google.protobuf:protobuf-java-util: $ protobufVersion \" ) // Required for converting well-known types to kotlin Instant or Duration. implementation ( \"org.jetbrains.kotlinx:kotlinx-datetime:0.4.0\" ) } 2. Code generation, \u00b6 protobuf { protoc { artifact = \"com.google.protobuf:protoc: $ protobufVersion \" } plugins { id ( \"kotlinx-protobuf-gen\" ) { artifact = \"io.github.dogacel:kotlinx-protobuf-gen:alpha-SNAPSHOT:jvm8@jar\" } } // Enable Kotlin generation generateProtoTasks { all (). forEach { it . builtins { remove ( \"java\" ) // Optionally you can keep the java generated files. } it . plugins { id ( \"kotlinx-protobuf-gen\" ) { option ( \"package_prefix=custom.pkg\" ) // Set a custom package prefix } } } } } 3. Writing proto files, \u00b6 Add your proto files to a known proto file path such as src/main/proto . syntax = \"proto3\" ; package demo ; message Task { int32 id = 1 ; optional string description = 2 ; Status status = 3 ; enum Status { WIP = 0 ; DONE = 1 ; } } The following class will be generated and added to your classpath. @Serializable public data class Task ( @ProtoNumber ( number = 1 ) public val id : Int = 0 , @ProtoNumber ( number = 2 ) public val description : String? = null , @ProtoNumber ( number = 3 ) public val status : Status = testgen . demo . Task . Status . WIP , ) { @Serializable public enum class Status { @ProtoNumber ( number = 0 ) WIP , @ProtoNumber ( number = 1 ) DONE , } }","title":"Setup"},{"location":"guide/setup/#setup","text":"To see more examples on how to use this library, check out the examples directory. This document also includes details regarding the protoc gradle plugin setup to include .proto files in your project. You can either directly compile proto sources in your kotlin project or you can prefer to publish a JAR containing the sources and include it in your project. Currently only available version is alpha-SNAPSHOT . In order to use it, you need to add sonatype snapshot repository to your build.gradle.kts file, repositories { mavenCentral () maven { this . url = uri ( \"https://s01.oss.sonatype.org/content/repositories/snapshots/\" ) } }","title":"Setup"},{"location":"guide/setup/#1-dependencies","text":"plugins { kotlin ( \"jvm\" ) version \"1.9.0\" id ( \"org.jetbrains.kotlin.plugin.serialization\" ) version \"1.9.0\" id ( \"com.google.protobuf\" ) version \"0.9.4\" } var protobufVersion = \"3.23.4\" dependencies { implementation ( \"org.jetbrains.kotlinx:kotlinx-serialization-json:1.6.0-RC\" ) implementation ( \"org.jetbrains.kotlinx:kotlinx-serialization-protobuf:1.6.0-RC\" ) // Required if stream service definitions will be generated. Streaming RPC operations are // defined as Flow<...> types in code. implementation ( \"org.jetbrains.kotlinx:kotlinx-coroutines-core:1.7.3\" ) // Required if `bytes` type is used. implementation ( \"com.google.protobuf:protobuf-kotlin: $ protobufVersion \" ) // Required for importing well-known types such as `com.google.protobuf.Timestamp`. implementation ( \"com.google.protobuf:protobuf-java-util: $ protobufVersion \" ) // Required for converting well-known types to kotlin Instant or Duration. implementation ( \"org.jetbrains.kotlinx:kotlinx-datetime:0.4.0\" ) }","title":"1. Dependencies,"},{"location":"guide/setup/#2-code-generation","text":"protobuf { protoc { artifact = \"com.google.protobuf:protoc: $ protobufVersion \" } plugins { id ( \"kotlinx-protobuf-gen\" ) { artifact = \"io.github.dogacel:kotlinx-protobuf-gen:alpha-SNAPSHOT:jvm8@jar\" } } // Enable Kotlin generation generateProtoTasks { all (). forEach { it . builtins { remove ( \"java\" ) // Optionally you can keep the java generated files. } it . plugins { id ( \"kotlinx-protobuf-gen\" ) { option ( \"package_prefix=custom.pkg\" ) // Set a custom package prefix } } } } }","title":"2. Code generation,"},{"location":"guide/setup/#3-writing-proto-files","text":"Add your proto files to a known proto file path such as src/main/proto . syntax = \"proto3\" ; package demo ; message Task { int32 id = 1 ; optional string description = 2 ; Status status = 3 ; enum Status { WIP = 0 ; DONE = 1 ; } } The following class will be generated and added to your classpath. @Serializable public data class Task ( @ProtoNumber ( number = 1 ) public val id : Int = 0 , @ProtoNumber ( number = 2 ) public val description : String? = null , @ProtoNumber ( number = 3 ) public val status : Status = testgen . demo . Task . Status . WIP , ) { @Serializable public enum class Status { @ProtoNumber ( number = 0 ) WIP , @ProtoNumber ( number = 1 ) DONE , } }","title":"3. Writing proto files,"},{"location":"guide/using/","text":"Using \u00b6 TODO Sample code to serialize to protobuf binary Sample code to deserialize from protobuf binary Sample code to serialize to protobuf json Sample code to deserialize from protobuf json Sample code to run gRPC server Sample code to call gRPC server using a client Well-known-types","title":"Using"},{"location":"guide/using/#using","text":"TODO Sample code to serialize to protobuf binary Sample code to deserialize from protobuf binary Sample code to serialize to protobuf json Sample code to deserialize from protobuf json Sample code to run gRPC server Sample code to call gRPC server using a client Well-known-types","title":"Using"}]}